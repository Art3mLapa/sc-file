//------------------------------------------------
// File: MCSA.bt
// Authors: onejeuu
// Version: 1.0
// Purpose: Parse MCSA model files.
// Category: 3D Graphic
// File Mask: *.mcsa,*.mcvd
// ID Bytes: 4D 43 53 41 // MCSA
//------------------------------------------------


// Colors

enum BG {
    WHITE = 0xEEEEEEE,
    BLACK = 0x707070,
    GRAY = 0xDDDDDD,
    YELLOW = 0x70FFFF,
    PINK = 0xFF70FF,
    CYAN = 0xFFEE70,
    GREEN = 0x70EE70,
    RED = 0x7070EE,
};


// Data Types

struct String {
    ushort size <bgcolor=BLACK>;
    if ( size > 0 )
        char str[size] <bgcolor=YELLOW>;
};

struct Vec2 {
    short u, v;
};

struct Vec3 {
    short x, y, z;
};

struct Vec3f {
    float x, y, z;
};

struct Vec4 {
    short x, y, z, w;
};

struct Vec4b {
    byte x, y, z, w;
};

struct Polygons_short {
    ushort a, b, c;
};

struct Polygons_int {
    uint a, b, c;
};


// Header Flags

struct Flags7 {
    ubyte SKELETON;
    ubyte TEXTURE;
    ubyte NORMALS;
    ubyte COLORS;       // ! Unconfirmed
};

struct Flags8 {
    ubyte SKELETON;
    ubyte TEXTURE;
    ubyte NORMALS;
    ubyte TANGENTS;     // ! Unconfirmed
    ubyte BITANGENTS;   // ! Unconfirmed
};

struct Flags10 {
    ubyte SKELETON;
    ubyte TEXTURE;
    ubyte NORMALS;
    ubyte TANGENTS;     // ! Unconfirmed
    ubyte BITANGENTS;   // ! Unconfirmed
    ubyte COLORS;       // ! Unconfirmed
};


// Model Header

struct Signature {
    char signature[4];
};

struct Header {
    Signature signature <name="Signature", bgcolor=GRAY>;
    float version <name="Version", bgcolor=PINK>;

    switch( version ) {
        case 7.0:
            Flags7 flags <name="Flags", bgcolor=CYAN>; break;
        case 8.0:
            Flags8 flags <name="Flags", bgcolor=CYAN>; break;
        case 10.0:
            Flags10 flags <name="Flags", bgcolor=CYAN>; break;
        default:
            Printf( "ERROR: Mcsa file version '%g' is unsupported.\n", version);
            Exit(0);
    }

    float scale_positions <name="Positions scale", bgcolor=BLACK>;

    if ( flags.TEXTURE )
        float scale_texture <name="Texture scale", bgcolor=BLACK>;

    if ( version >= 10.0 & flags.NORMALS )
        float scale_normals <name="Normals scale", bgcolor=BLACK>;
} header <name="Header">;


// Model Meshes

struct BonesIndexes {
    ubyte links <name="Links", bgcolor=BLACK>;
    ubyte count <name="Count", bgcolor=BLACK>;
    if ( count > 0 )
        byte bones[count] <name="Index", bgcolor=CYAN>;
};

struct Counts {
    uint vertices <name="Vertices">;
    uint polygons <name="Polygons">;
};

struct Locals {
    Vec3f center <name="Center", comment="Unconfirmed">;
    Vec3f axis <name="Axis", comment="Unconfirmed">;
};

struct Mesh {
    String name <name=Str("Name: '%s'", this.str)>;
    String material <name=Str("Material: '%s'", this.str)>;

    if ( header.flags.SKELETON )
        BonesIndexes bones <name="Bones">;

    Counts counts <name="Counts", bgcolor=PINK>;

    if ( header.flags.TEXTURE )
        float scale_unknown <name="Unknown scale", bgcolor=BLACK>;

    if ( header.version >= 10.0 )
        Locals locals <name="Locals", bgcolor=BLACK>;

    Vec4 positions[counts.vertices] <name="Positions", bgcolor=GREEN>;

    if ( header.flags.TEXTURE )
        Vec2 textures[counts.vertices] <name="Textures", bgcolor=RED>;

    if ( header.version == 7.0 )
        if ( header.flags.COLORS )
            byte _colors[counts.vertices*4] <bgcolor=BLACK, hidden=true>;

    if ( header.version >= 8.0 )
        if ( header.flags.BITANGENTS )
            byte _bitangents[counts.vertices*4] <bgcolor=BLACK, hidden=true>;

    if ( header.flags.NORMALS )
        Vec4b normals[counts.vertices] <name="Normals", bgcolor=PINK>;

    if ( header.version >= 8.0 )
        if ( header.flags.TANGENTS )
            byte _tangents[counts.vertices*4] <bgcolor=BLACK, hidden=true>;

    if ( header.flags.SKELETON )
        switch( bones.links ) {
            case 1:
            case 2:
                byte _bones[counts.vertices*4] <bgcolor=BLACK, hidden=true>; break;
            case 3:
            case 4:
                byte _bones[counts.vertices*8] <bgcolor=BLACK, hidden=true>; break;
            default : break;
        }

    if ( header.version == 10.0 )
        if ( header.flags.COLORS )
            byte _colors[counts.vertices*4] <bgcolor=BLACK, hidden=true>;

    if ( counts.polygons * 3 < 0x10000 )
        Polygons_short polygons[counts.polygons] <name="Polygons", bgcolor=WHITE>;
    else
        Polygons_int polygons[counts.polygons] <name="Polygons", bgcolor=WHITE>;
};

struct Meshes {
    uint count <name="Count", bgcolor=PINK>;
    if ( count > 0 )
        Mesh meshes[count] <name="Mesh", optimize=false>;
} meshes <name="Meshes">;


// Model Skeleton

struct Bone {
    String name <name=Str("Name: '%s'", this.str)>;
    byte parent_id <name="Parent ID", bgcolor=CYAN>;
    Vec3f position <name="Position", bgcolor=GREEN>;
    Vec3f rotation <name="Rotation", bgcolor=RED>;
};

if ( header.flags.SKELETON )
    struct Skeleton {
        ubyte count <name="Count", bgcolor=PINK>;
        if ( count > 0 )
            Bone bones[count] <name="Bone", optimize=false>;
    } skeleton <name="Skeleton">;


// Model Animations

struct BoneNode {
    Vec3 position <name="Position", bgcolor=GREEN>;
    Vec3 rotation <name="Rotation", bgcolor=RED>;
    short unknown <name="Unknown", bgcolor=BLACK>;
};

struct Frame {
    BoneNode bone[skeleton.count] <name="Bone", comment="Unconfirmed">;
};

struct Frames {
    uint count <name="Count", bgcolor=PINK>;
    float tickrate <name="Tickrate", bgcolor=CYAN>;
    if ( count > 0 )
        Frame frame[count] <name="Frame", optimize=false>;
};

struct Anim {
    String name <name=Str("Name: '%s'", this.str)>;
    Frames frames <name="Frames">;
};

// Not sure where exactly marked that file contains animations.
// Perhaps its indicated from outside.
if ( !FEof() )
    if ( header.flags.SKELETON )
        struct Animations {
            uint count <name="Count", bgcolor=PINK>;
            if ( count > 0 )
                Anim anims[count] <name="Animation", optimize=false>;
        } animations <name="Animations">;