//------------------------------------------------
// File: MCSA.bt
// Authors: onejeuu
// Version: 2.0
// Purpose: Parse model scenes.
// Category: STALCRAFT
// File Mask: *.mcsa,*.mcsb,*.mcvd
//------------------------------------------------

// Hash Prefix (MCSB)

local string ext = FileNameGetExtension(GetFileName());

BigEndian();

if ( ext == ".mcsb" ) {
    uint hashSize <hidden=true, bgcolor=cLtGray>;
    char hashData[hashSize] <hidden=true, bgcolor=cGray>;
}


// Default Byte Order

LittleEndian();


// Length Prefixed String

typedef struct {
    ushort size <bgcolor=cDkYellow>;
    if ( size > 0 ) char data[size] <bgcolor=cYellow, optimize=false>;
} String <read=(exists(data) ? data : "")>;


// Vectors

float nB(byte  i) { return (float)i / 127.0f; }   // NormalizeByte
float nS(short i) { return (float)i / 32767.0f; } // NormalizeShort

typedef struct { short u, v; } Vec2s <read=Str("%f, %f", nS(u), nS(v))>;

typedef struct { short x, y, z; } Vec3s <read=Str("%f, %f, %f", nS(x), nS(y), nS(z))>;
typedef struct { float x, y, z; } Vec3f <read=Str("%f, %f, %f", x, y, z)>;

typedef struct { byte  x, y, z, w; } Vec4b <read=Str("%f, %f, %f, %f", nB(x), nB(y), nB(z), nB(w))>;
typedef struct { short x, y, z, w; } Vec4s <read=Str("%f, %f, %f, %f", nS(x), nS(y), nS(z), nS(w))>;
typedef struct { float x, y, z, w; } Vec4f <read=Str("%f, %f, %f, %f", x, y, z, w)>;

typedef struct { ushort a, b, c; } Tri16 <read=Str("%d, %d, %d", a, b, c)>;
typedef struct { uint   a, b, c; } Tri32 <read=Str("%d, %d, %d", a, b, c)>;


// Header Flags

typedef ubyte Flag;
typedef struct Flags4 { Flag SKELETON, UV, NORMALS, UNKNOWN_A; };
typedef struct Flags5 { Flag SKELETON, UV, NORMALS, UNKNOWN_A, UNKNOWN_B; };
typedef struct Flags6 { Flag SKELETON, UV, NORMALS, UNKNOWN_A, UNKNOWN_B, COLORS; };


// File Header

char signature[4] <name="Signature", fgcolor=cGreen>;
float version <name="Version", fgcolor=cRed>;

switch( version ) {
    case 7.0:
        Flags4 flags <name="Flags", fgcolor=cAqua>; break;
    case 8.0:
        Flags5 flags <name="Flags", fgcolor=cAqua>; break;
    case 10.0:
    case 11.0:
        Flags6 flags <name="Flags", fgcolor=cAqua>; break;
    default:
        Warning("ERROR: File version '%g' is unsupported.\n", version);
        Exit(-1);
}

struct Scales {
    float positions <name="Positions">;

    if ( flags.UV )
        float uv <name="UV">;

    if ( version >= 10.0 )
        if ( flags.NORMALS )
            float unknown <name="Unknown">;
} scales <name="Scales">;


// Model Meshes

typedef struct {
    ubyte maxInfluences <name="Max Influences">;
    ubyte jointCount <name="Joint Count">;
    if ( jointCount > 0 ) ubyte jointIndices[jointCount] <name="Joint">;
} SkinBinding;

typedef struct {
    ubyte boneIds[2];
    ubyte weights[2];
} SkinPairs;

typedef struct {
    ubyte boneIds[vertexCount * 4];
    ubyte weights[vertexCount * 4];
} SkinArrays;

typedef struct {
    if ( version >= 10.0 ) {
        Vec3f rotation <name="Rotation">;
        Vec3f position <name="Position">;
    }

    if ( version >= 11.0 )
        float unknown <name="Unknown">;
} MeshPivot;

typedef struct {
    String name <name="Name">;
    String material <name="Material">;

    if ( flags.SKELETON )
        SkinBinding skinBind <name="Skin", bgcolor=cWhite>;

    uint vertexCount <name="Vertex Count", bgcolor=cLtGreen>;
    uint triangleCount <name="Polygon Count", bgcolor=cLtGreen>;

    if ( flags.UV )
        float textureFilter <name="Texture Filtering">;

    MeshPivot pivot <name="Pivot">;

    Vec4s positions[vertexCount] <name="Positions", bgcolor=cGreen>;

    if ( flags.UV )
        Vec2s textures[vertexCount] <name="Textures", bgcolor=cRed>;

    if ( version >= 8.0 )
        if ( flags.UNKNOWN_B )
            Vec4b _unknown_b[vertexCount] <name="Unknown", bgcolor=cDkPurple>;

    if ( flags.NORMALS )
        Vec4b normals[vertexCount] <name="Normals", bgcolor=cPurple>;

    if ( version >= 7.0 )
        if ( flags.UNKNOWN_A )
            Vec4b _unknown_a[vertexCount] <name="Unknown", bgcolor=cDkPurple>;

    if ( flags.SKELETON )
        switch( skinBind.maxInfluences ) {
            case 1:
            case 2:
                SkinPairs weights[vertexCount] <name="Weights", bgcolor=cWhite>; break;
            case 3:
            case 4:
                SkinArrays weights <name="Weights", bgcolor=cWhite>; break;
        }

    if ( version >= 10.0 )
        if ( flags.COLORS )
            byte _colors[vertexCount * 4] <hidden=true>;

    if ( triangleCount * 3 < 0x10000 )
        Tri16 triangles[triangleCount] <name="Polygons", bgcolor=cLtBlue>;
    else
        Tri32 triangles[triangleCount] <name="Polygons", bgcolor=cLtBlue>;
} Mesh <read=(exists(this.name.data) ? this.name.data : "")>;

struct Model {
    int  meshCount <name="Mesh Count", bgcolor=cAqua>;
    if ( meshCount > 0 ) Mesh meshes[meshCount] <name="Mesh", optimize=false>;
} model <name="Model">;


// Model Skeleton

typedef struct {
    String name <name="Name">;
    ubyte parent_id <name="Parent ID", fgcolor=cAqua>;
    Vec3f position <name="Position", bgcolor=cWhite>;
    Vec3f rotation <name="Rotation", bgcolor=cGray>;
} Bone <read=(exists(this.name.data) ? this.name.data : "")>;

if ( flags.SKELETON )
    struct Skeleton {
        ubyte boneCount <name="Bone Count", bgcolor=cPurple>;
        if  ( boneCount > 0 ) Bone bones[boneCount] <name="Bone", optimize=false>;
    } skeleton <name="Skeleton">;


// Model Animation

struct BoneTransform {
    Vec4s rotation <name="Rotation", bgcolor=cGray>;
    Vec3s translation <name="Translation", bgcolor=cWhite>;
};

struct KeyFrame {
    if ( skeleton.boneCount > 0 ) BoneTransform transforms[skeleton.boneCount];
};

typedef struct {
    String name <name="Name">;
    int frameCount <name="Keyframe Count", bgcolor=cGreen>;
    float frameInterval <name="Frame Interval", fgcolor=cPurple>;
    if ( frameCount > 0 ) KeyFrame frame[frameCount] <optimize=false>;
} Clip <read=(exists(this.name.data) ? this.name.data : "")>;

// Not sure where exactly marked that file contains animation.
// Perhaps its indicated from outside.
if ( !FEof() )
    if ( flags.SKELETON )
        struct Animation {
            int  clipCount <name="Clip Count", bgcolor=cBlue>;
            if ( clipCount > 0 ) Clip clips[clipCount] <name="Clip", optimize=false>;
        } animation <name="Animation">;
