name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            name: Linux
            artifact_name: linux-binary
            binary_name: scfile_linux_x64
            cmd: mv dist/scfile scfile_linux_x64 && chmod +x scfile_linux_x64
          - os: windows-latest
            name: Windows
            artifact_name: windows-binary
            binary_name: scfile_windows_x64.exe
            cmd: mv dist/scfile.exe scfile_windows_x64.exe

    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.name }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install UV
        run: pip install uv

      - name: Install Dependencies
        run: uv sync

      - name: Build Binary
        run: uv run scripts/build.py

      - name: Prepare Artifact
        shell: bash
        run: ${{ matrix.cmd }}

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.binary_name }}

  publish-package:
    name: Publish PyPi
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install UV
        run: pip install uv

      - name: Build Package
        run: uv build -o ./dist/

      - name: Publish Package
        run: uv publish ./dist/*
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

  publish-release:
    name: Publish GitHub
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get Current Date
        id: date
        run: echo "date=$(date +'%B %d, %Y')" >> $GITHUB_OUTPUT

      - name: Get Previous Tag
        id: previous
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/releases/latest" || echo '')

          if [ -n "$response" ]; then
              prev_tag=$(echo "$response" | jq -r '.tag_name')
              echo "tag=$prev_tag" >> $GITHUB_OUTPUT
          else
              echo "No previous releases found"
              echo "tag=" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## `${{ github.ref_name }}` `${{ steps.date.outputs.date }}`

            ${{ steps.previous.outputs.tag &&
                format(
                    '**Full Changelog:** [`{0}...{1}`](https://github.com/{2}/compare/{0}...{1})',
                    steps.previous.outputs.tag,
                    github.ref_name,
                    github.repository
                ) || ''
            }}
          files: |
            artifacts/windows-binary/scfile_windows_x64.exe
            artifacts/linux-binary/scfile_linux_x64
